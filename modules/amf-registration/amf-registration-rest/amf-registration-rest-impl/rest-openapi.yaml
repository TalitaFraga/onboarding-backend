components:
  schemas:
    Account:
      description: A sample api
      properties:
        firstName:
          description: The first name.
          type: string
        lastName:
          description: The last name.
          type: string
        emailAddress:
          description: The email Address.
          type: string
        userName_:
          description: The user name.
          type: string
        gender:
          description: The gender.
          type: string
        birthday:
          description: The birthday.
          type: string
        password1:
          description: The password.
          type: string
        password2:
          description: The password.
          type: string
        homePhone:
          description: The home phone.
          type: string
        mobilePhone:
          description: The mobile phone.
          type: string
        address:
          description: The address home.
          type: string
        address2:
          description: The alternative address.
          type: string
        city:
          description: The city.
          type: string
        state:
          description: The state.
          type: string
        zip:
          description: The zip.
          type: string
        securityQuestion:
          description: Security Question.
          type: string
        securityAnswer:
          description: Security Answer.
          type: string
        acceptedTou:
          description: Terms of use.
          type: string

info:
  description: "AmfRegistrationRest REST API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  title: "AmfRegistrationRest"
  version: v1.0
openapi: 3.0.1

paths:
  "/account":
    get:
      description: Return all accounts
      operationId: getAllAccount
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Account"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Account"
                type: array
          description: "Successfully returned datas of account"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
      tags: [ "Account" ]

      post:
        operationId: createAccount
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
            application/xml:
              schema:
                $ref: "#/components/schemas/Account"
        responses:
          201:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Account"
              application/xml:
                schema:
                  $ref: "#/components/schemas/Account"
            description: "Successfully created account"
        tags: [ "Account" ]
  "/account/{accountId}":
    get:
      operationId: getAccount
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
            application/xml:
              schema:
                $ref: "#/components/schemas/Account"
          description: "Successfully returned datas of account"
      tags: [ "Account" ]

      delete:
        operationId: deleteAccount
        parameters:
          - in: path
            name: accountId
            required: true
            schema:
              type: string
        responses:
          204:
            content:
              application/json: { }
              application/xml: { }
            description: "Successfully deteled account"
        tags: [ "Account" ]

      put:
        operationId: updateAccount
        parameters:
          - in: path
            name: accountId
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
            application/xml:
              schema:
                $ref: "#/components/schemas/Account"
        responses:
          200:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Account"
              application/xml:
                schema:
                  $ref: "#/components/schemas/Account"
            description: "Successfully returned datas of account"
        tags: [ "Account" ]

      get:
        operationId: getAccount
        parameters:
          - in: path
            name: accountId
            required: true
            schema:
              type: string
        responses:
          200:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Account"
              application/xml:
                schema:
                  $ref: "#/components/schemas/Account"
            description: "Successfully returned datas of account"
        tags: [ "Account" ]